#!/bin/bash
#
# fbopt version 0.4.2
#
# Written in 2018 by Franco Masotti/frnmst <franco.masotti@live.com>
#
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the public 
# domain worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. If not, see 
# <http://creativecommons.org/publicdomain/zero/1.0/>. 
#
#
# See also https://frnmst.gitlab.io/notes/my-bash-option-parsing-template.html
#

show_help()
{
    cat <<-EOF
Usage: get_fattura_pa [OPTION] METADATA_FILE SIGNED_FILE
The purpose of this script is exclusively to read invoices received from the
*Sistema di Interscambio*

Mandatory arguments to long options are mandatory for short options too.
Options:
    -c, --ignore-checksum
    -f, --force-certificates-download
    -h, --help                              print this help
    -n, --no-extract-attachments
    --print-flags                           print the enabled options. This can also
                                            be used to print the default options
    -q, --quiet
    -s, --ignore-signature

Exit status:
 0  if OK,
 1  if an error occurred.

<License header>
<Copyright>
EOF
}

# A function that prints the variable name and value of all
# the flags enabled by the user. This is useful to check that
# all the flags are correct, as kind of a dry run.
show_flags()
{
    local flags="${*}"

    for flag in ${flags}; do
            printf "%s='%s'\n" "${flag}" "${!flag}"
    done
}

getopt_error()
{
    local program_name="${0}"

    printf "%s\n" "Try '"${program_name}" --help' for more information"
} 1>&2 2>&-

main()
{
    # Create a new array from the reference of the input one.
    # See https://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
    # See some comments below.
    declare -a argc=("${!1}")

    # Set the options. flag_f has an optional argument.
    local getopt_short_options='cfhnqs'
    local getopt_long_options='ignore-checksum,force-certificates-download,\
no-extract-attachments,print-flags,help,quiet,ignore-signature'

    # Set the default values for the flags.
    local ignore_checksum='false'
    local force_certificates_download='false'
    local no_extract_attachments='false'
    local quiet='false'
    local ignore_signature='false'

    local program_name="${0}"
    opts="$(getopt \
        --name "${program_name}" \
        --shell bash \
        --options "${getopt_short_options}" \
        --longoptions "${getopt_long_options}" \
        -- \
        "${argc[@]}")"
    getopt_retval=${?}
    # Check that getopt works and that some kind of argument
    # is passed to the script. This is "quotation hell".
    a="'"${argc[@]}"'"
    { [ ${getopt_retval} -ne 0 ] || [ -z "${a}" ]; } && getopt_error && return 1
    eval set -- "${opts}"

    # Option parsing.
    while [ "${1}" != '--' ]; do
        case "${1}" in

            -c | --ignore-checksum )                ignore_checksum='true' ;;

            -f | --force-certificates-download )    force_certificates_download='true' ;;

            -n | --no-extract-attachments )         no_extract_attachments='true' ;;

            -q | --quiet )                          quiet='true' ;;

            -s | --ignore-signature )               ignore_signature='true' ;;

            -h | --help )                           help='true' ;;

            --print-flags )                         print_flags='true' ;;

        esac
        # Iterate through all arguments.
        shift 1
    done

    shift 1
    # Everything else after '--' is an argument.
    argc="${*}"

    # Arguments must be placed here as local variables
    local metadata_file="${1}"
    local signed_file="${2}"

    [ "${help}" = 'true' ] && show_help && return 0
    # Check that the flags or arguments that must be non empty are actually not
    # empty.
    # A user might infact circumvent getopt's mechanisms like this
    # ./program -flag ''
    # This can also be done inside the option parser loop but to avoid nestings
    # I prefer it done here.
    { [ -z "${metadata_file}" ] \
        || [ -z "${signed_file}" ]; } \
        && getopt_error && return 1
    [ "${print_flags}" = 'true' ] \
        && show_flags \
            'flag_a' \
            'flag_b' \
            'flag_c' \
            'flag_d' \
            'flag_e' \
            'flag_f' \
        && return 0
    # Override values of optional parameters.

    # From now on you should call a function or an external program
    # using the values of the flag variables.
    chain "${metadata_file}" "${signed_file}" "${ignore_checksum}" \
        "${force_certificates_download}" "${ignore_signature}" \
        "${no_extract_attachments}"
}

# Test dependencies and versions.
# getopt must return 4 to be fully compatible. See getopt's manual.
which bash getopt 1>/dev/null 2>/dev/null && { getopt -T; [ ${?} -eq 4 ]; }

# Get and pass argc to the main function.
# All this work with an array must be done to preserve
# quotations for arguments that have whitespaces.
# See https://lists.debian.org/debian-user/2007/12/msg01244.html
declare -a opts=()
for opt in "${@}"; do
    opts=("${opts[@]}" "${opt}")
done
main 'opts[@]'
